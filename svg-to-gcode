#!/bin/bash

set -e
shopt -s nullglob

SCRIPT=$(basename $0)
PATHS=() # Bash array

TRANSFORMATIONS=""
PREVIEW=0
OUTFILE=""

usage()
{
    cat <<EOF
Usage: $SCRIPT [--help] [--preview] [--transformations "<string>"] [--outfile "<filename>"] <image> ..."

required arguments:
  image                   one or more SVG files to be converted to Gcode

optional arguments:
  -o, --outfile           output filename
  -p, --preview           show a preview (with vpype show)
                          rather than outputting a file
  -t, --transformations   additional vpype commands to run,
                          after the SVG is read but before
                          occult and linesort are applied
  -h, --help              show this message and exit

examples:
  $SCRIPT foo.svg
  $SCRIPT foo.svg -o bar.gcode
  $SCRIPT --preview foo.svg
  $SCRIPT -t "rotate -o 0 0 90 layout -h right -v top a4" foo.svg
EOF
}

store_image_path() {
    if [ -e "$1" ]; then
            PATHS+=("$1")
    else
        echo "Unknown argument: $1"
        usage
        exit 1
    fi
}

while [ "$1" != "" ]; do
    case $1 in
        -o | --outfile )          shift
                                  OUTFILE="$1"
                                  ;;
        -p | --preview )          PREVIEW=1
                                  ;;
        -t | --transformations )  shift
                                  TRANSFORMATIONS="$1"
                                  ;;
        -h | --help )             usage
                                  exit
                                  ;;
        * )                       store_image_path "$1"
                                  ;;
    esac
    shift
done

for INFILE in "${PATHS[@]}"; do
    # If --preview, then show output in vpype previewer,
    # otherwise, gwrite it to the $OUTFILE
    if [ "$PREVIEW" = "1" ]; then
        OUTPUT="show"
    else
        # Construct a Gcode output file name
        # if --outfile has not been specified.
        if [ "$OUTFILE" = "" ]; then
            OF="${INFILE%.*}.gcode"
        else
            OF="$OUTFILE"
        fi
        OUTPUT="gwrite --profile my_own_plotter $OF"
    fi

    vpype --config "vpype.toml" \
    read "$INFILE" \
    $TRANSFORMATIONS \
    occult --ignore-layers --tolerance 0.5mm \
    linesort \
    $OUTPUT
done
